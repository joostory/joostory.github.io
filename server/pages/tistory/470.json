{"pageProps":{"post":{"id":"470","date":"2017. 3. 28. 06:37","title":"TypeScript 살펴보기","content":"<p>예전엔 사용하지 않을 기술엔 관심도 두지 않았다. 그런데 오랜시간이 지난 뒤에 그 기술을 사용해야 할 때가 왔을때 너무 아무것도 몰라서 당황한 적이 한두번이 아니다. react를 처음 시작했을때 그랬고 node.js를 시작했을때 그랬다. react 이후로 나는 갈림길에 섰을때 적어도 뭔지는 모두 알아보고 선택하기로 했다.</p>\n<p>이번에 알아볼 것은 <a href=\"https://www.typescriptlang.org\">TypeScript</a>다.</p>\n<p>TypeScript는 Angular때문에 처음 알았다. 물론 <a href=\"https://angularjs.org\">구 Angular</a>는 아니고 <a href=\"https://angular.io\">새로운 Angular</a>다. (벌써 <a href=\"http://angularjs.blogspot.kr/2017/03/angular-400-now-available.html\">v4</a> 나왔더라. v3은 건더뛴 듯) 사실 Angular를 알아보려고 했는데 TypeScript를 모르는채로 Angular를 알아보면 안될 것 같아 방향을 틀었다.</p>\n<p>TypeScript는 MS가 만든거라 그런지 굉장히 문서화도 잘되어 있고 VS Code에서의 지원도 환상적이었다. 먼저 <a href=\"https://www.typescriptlang.org/docs/tutorial.html\">tutorial</a>을 따라해보기로 했다. 한번 따라해보니 감이 잡힌다. 그래서 조금 정리를 하면서 살펴봤다.</p>\n<pre><code>{\n    &quot;compilerOptions&quot;: {\n        &quot;outDir&quot;: &quot;./built&quot;,\n        &quot;allowJs&quot;: false,\n        &quot;target&quot;: &quot;es2015&quot;\n    },\n    &quot;include&quot;: [\n        &quot;./src/**/*&quot;\n    ]\n}\n</code></pre><p>TypeScript는 당연하게도 compile(?)이 필요하다. 브라우저에서 바로 실행되지 않기 때문이다. 그래서 <code>tsc</code>를 통해서 ts파일을 js파일로 변환해야한다. 이를 조금 더 편하게 해주는 것이 <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json</a>이다. 이제 <code>tsc</code>만 실행하면 된다.</p>\n<pre><code>interface Person {\n    firstName: string;\n    lastName: string;\n\n    sayHello: Function;\n}\n\nclass Student implements Person {\n\n    firstName: string;\n    lastName: string;\n\n    constructor(firstName: string, lastName: string) {\n        this.firstName = firstName\n        this.lastName = lastName\n    }\n\n    sayHello() {\n        return &quot;Hello, &quot; + this.firstName + &quot; &quot; + this.lastName\n    }\n}\n</code></pre><p>tutorial에 있는 코드를 내 나름대로 만들어봤다. <strong>type</strong>script라는 이름답게 type을 지정하는 것이 특징이다. 만들다보니 ES2015와 비슷하다. 거기에 type이 추가된 정도의 느낌이다. 문서를 보다보니 typescript 소개에도 이렇게 써있었다.</p>\n<blockquote>\n<p>TypeScript offers support for the latest and evolving JavaScript features, including those from ECMAScript 2015 and future proposals, like async functions and decorators, to help build robust components.</p>\n</blockquote>\n<p>tsc로 compile을 하면 target으로 지정한 형태의 코드로 변경이 된다. es2015로 바뀐코드를 보면 어떤 차이가 있는지 확연히 드러난다. interface, type이 모두 제거되고 나머지는 똑같다. 여기까지만 따라하고 <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">문서</a>를 계속보니 <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\">Generics</a>, <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">Enum</a>등 객체지향 언어에서나 볼 수 있는 것들을 많이 제공한다.</p>\n<p>이 정도 보고 <a href=\"https://github.com/joostory/typescript-start\">따라해</a>봤으니 됐다. 이젠 Angular를 볼 차례다.</p>\n            ","summary":"예전엔 사용하지 않을 기술엔 관심도 두지 않았다. 그런데 오랜시간이 지난 뒤에 그 기술을 사용해야 할 때가 왔을때 너무 아무것도 몰라서 당황한 적이 한두번이 아니다. react를 처음 시작했을때 그랬고 node.js를 시작했을때 그랬다. react 이후로 나는 갈림길에 섰을때 적어도 뭔지는 모두 알아보고 선택하기로 했다.\n이번에 알아볼 것은 TypeScript다.\nTypeScript는 Angular때문에 처음 알았다. 물론 구 Angular는 아니고 새","image":"https://t1.daumcdn.net/tistory_admin/static/images/openGraph/opengraph.png"}},"__N_SSG":true}