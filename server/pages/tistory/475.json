{"pageProps":{"post":{"id":"475","date":"2017. 4. 30. 23:57","title":"angular 체험","content":"<p>지난 번에 <a href=\"http://blog.joostory.net/467\">vue.js와 react로 comment sample을 만들었는데</a> 이번엔 <a href=\"https://angular.io\">angular</a>로 만들어보기로 했다.</p>\n<h2 id=\"appmodule\">AppModule</h2>\n<p>platform-browser-dynamic를 사용해서 <code>AppModule</code>을 로드하는 main.ts는 건너뛰고 바로 <code>AppModule</code>로 들어간다. angular의 특징은 필요한 component, provider들을 미리 <code>NgModule</code>에 다 적어주고 시작을 해야한다는 거다.</p>\n<p>개발을 하면서 component가 하나씩 늘어나고 service도 하나씩 늘어날텐데 그때마다 이 파일을 수정해줘야 한다. 중간에 구조를 바꾸면서 <code>CommentFormComponent</code>, <code>CommentService</code>를 추가했는데 여기다가 추가해주는 것은 조금 번거로웠다.</p>\n<pre><code>import { NgModule }      from &#39;@angular/core&#39;;\nimport { BrowserModule } from &#39;@angular/platform-browser&#39;;\nimport { FormsModule }   from &#39;@angular/forms&#39;;\n\nimport { AppComponent }  from &#39;./components/app.component.js&#39;;\nimport { CommentFormComponent }  from &#39;./components/comment-form.component.js&#39;;\nimport { CommentService } from &#39;./components/comment.service.js&#39;\n\n@NgModule({\n  imports: [ BrowserModule, FormsModule ],\n  declarations: [ AppComponent, CommentFormComponent ],\n  bootstrap: [ AppComponent ],\n  providers: [ CommentService ]\n})\nexport class AppModule { }\n</code></pre><h2 id=\"appcomponent\">AppComponent</h2>\n<p><code>AppComponent</code>는 bootstrap으로 지정되어 있다. 앱의 시작이라는 말이다. 그래서 그런지 파일이 좀 크다. list도 따로 분리했으면 좀 더 괜찮았을텐데 굳이 나누진 않았다. 그리고 template로 따로 분리했다면 파일이 좀 더 작아졌겠지만 그러지 않았다.</p>\n<p>react의 state, prop에 익숙해져서 그런지 angular도 그런식으로 만들려고 했다. &#39;근데 하위 component에 method는 어떻게 넘겨주지?&#39;라는 생각을 했다. 그런데 angular는 data의 관리를 service에 모두 위임한다. <code>constructor</code>가 <code>commentService</code>를 받도록 하고 데이터를 가져올때 <code>commentService</code>를 사용한다. view에서 직접 사용할 data만 component가 가진다.</p>\n<pre><code>import { Component, OnInit } from &#39;@angular/core&#39;;\nimport { Comment } from &#39;./comment.js&#39;\nimport { CommentService } from &#39;./comment.service.js&#39;\n\n@Component({\n  selector: &#39;comment-app&#39;,\n  template: `\n  &lt;div class=&quot;app&quot;&gt;\n    &lt;div&gt;{{count}} Comments&lt;/div&gt;\n\n    &lt;button *ngIf=&quot;hasMore&quot; class=&quot;btn-more&quot; (click)=&quot;onLoadMore()&quot;&gt;more comment&lt;/button&gt;\n\n    &lt;div *ngFor=&quot;let comment of comments&quot;&gt;\n      &lt;div class=&quot;comment&quot;&gt;\n        &lt;div class=&quot;info&quot;&gt;{{comment.created}}&lt;/div&gt;\n        &lt;div class=&quot;message&quot;&gt;{{comment.message}}&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;comment-form&gt;&lt;/comment-form&gt;\n  &lt;/div&gt;\n  `,\n})\nexport class AppComponent implements OnInit {\n  count = 6;\n  hasMore = true;\n  comments: Comment[];\n\n  constructor(private commentService: CommentService) { }\n\n  ngOnInit() { this.getComments() }\n\n  getComments() {\n    this.comments = this.commentService.getComments();\n    this.count = this.commentService.getCommentCount();\n    this.hasMore = this.count !== this.comments.length;\n  }\n\n  onLoadMore() {\n    this.commentService.loadMoreComments();\n    this.getComments();\n  }\n}\n</code></pre><h2 id=\"commentservice\">CommentService</h2>\n<p>CommentService는 <code>@Injectable</code>을 사용해서 Component들에 inject되도록 하고 내부에 실제 data들을 가진다. react로 치면 redux의 reducer의 역할과 비슷하다.</p>\n<pre><code>import { Injectable } from &#39;@angular/core&#39;;\n\nimport { Comment } from &#39;./comment.js&#39;\n\n@Injectable()\nexport class CommentService {\n\n  count: number = 6;\n  hasMore: any = true;\n  comments: Comment[] = [\n    {id: 5, message:&#39;Comment 5&#39;, created: new Date(new Date().getTime() - 600000)},\n    {id: 6, message:&#39;Comment 6&#39;, created: new Date(new Date().getTime() - 500000)}\n  ];\n\n  getCommentCount(): number {\n    return this.count\n  }\n\n  getComments(): Comment[] {\n    return this.comments\n  }\n\n  loadMoreComments(): void {\n    this.comments = [\n      {id: 1, message: &#39;Comment 1&#39;, created: new Date(new Date().getTime() - 1000000)},\n      {id: 2, message: &#39;Comment 2&#39;, created: new Date(new Date().getTime() - 900000)},\n      {id: 3, message: &#39;Comment 3&#39;, created: new Date(new Date().getTime() - 800000)},\n      {id: 4, message: &#39;Comment 4&#39;, created: new Date(new Date().getTime() - 700000)},\n      ...this.comments\n    ];\n  }\n\n  addComment(message: string): void {\n    this.comments.push({\n      id: this.count + 1,\n      message: message,\n      created: new Date()\n    });\n    this.count++;\n  }\n}\n</code></pre><h2 id=\"commentformcomponent\">CommentFormComponent</h2>\n<p>CommentFormComponent는 <code>message</code>를 <code>ngModel</code>로 사용해서 <code>CommentService</code>에 새로운 message를 전달한다.</p>\n<pre><code>import { Component } from &#39;@angular/core&#39;;\nimport { Comment } from &#39;./comment.js&#39;\nimport { CommentService } from &#39;./comment.service.js&#39;\n\n@Component({\n  selector: &#39;comment-form&#39;,\n  template: `\n    &lt;form class=&quot;form&quot; (submit)=&quot;onAdd(message)&quot;&gt;\n      &lt;label&gt;message&lt;/label&gt;\n      &lt;input [(ngModel)]=&quot;message&quot; name=&quot;message&quot; class=&quot;text&quot; type=&#39;text&#39; /&gt;\n      &lt;button type=&#39;submit&#39;&gt;submit&lt;/button&gt;\n    &lt;/form&gt;\n  `,\n})\nexport class CommentFormComponent {\n\n  message: string = &quot;&quot;;\n\n  constructor(private commentService: CommentService) { }\n\n  onAdd(message: string) {\n    this.commentService.addComment(message);\n    this.message = &quot;&quot;;\n  }\n}\n</code></pre><hr>\n<p>angular를 시작하는 것은 아주 멀고 멀었다. 시간을 들여서 하나하나 보다보니 그래도 뭔가 만들만한 수준으로 이해가 되긴 한다. 그런데 아직 production level로 사용하려면 어떻게 해야하는지 감이 안온다. 지금 코드도 dynamic으로 로드하고 있어서 수많은 js파일을 실시간으로 로드하는 것이다. 이런 부분에서 공식 문서에서 답을 찾기가 어렵다. 너무 당연하고 쉬운 방법이라 굳이 쓸 필요가 없었을까? 잘 모르겠다.</p>\n<p>좋은 점이라면 그나마 vue.js보다는 코드 자체가 이해하기 쉬운형태이고... 아니다. 다시 처음시작하는 사람의 마음으로 보니 그렇지 않다. 매우매우 어렵다. 일단 typescript를 완전히 마스터하지 않는다면 angular는 시작할 생각도 하지 않는 것이 좋아보인다. typescript는 좋지만 너무 어렵다.</p>\n<p>일단 샘플코드를 만들기는 했지만 과연 angular를 production으로 사용하는 곳이 많이 있을까싶다. 조금 더 알아보기는 하겠지만 난 react를 계속 할 것 같다.</p>\n            ","summary":"지난 번에 vue.js와 react로 comment sample을 만들었는데 이번엔 angular로 만들어보기로 했다.\nAppModule\nplatform-browser-dynamic를 사용해서 AppModule을 로드하는 main.ts는 건너뛰고 바로 AppModule로 들어간다. angular의 특징은 필요한 component, provider들을 미리 NgModule에 다 적어주고 시작을 해야한다는 거다.\n개발을 하면서 component가 하나씩 늘","image":"https://t1.daumcdn.net/tistory_admin/static/images/openGraph/opengraph.png"}},"__N_SSG":true}