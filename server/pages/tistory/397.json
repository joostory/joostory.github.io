{"pageProps":{"post":{"id":"397","date":"2015. 12. 18. 01:27","title":"React 체험","content":"<figure style=\"margin:0; text-align:center\"><span class=\"imageblock\" style=\"display:inline-block;width:600px;width: 600px; height: 600px;;height:auto;max-width:100%\"><span data-url=\"https://t1.daumcdn.net/cfile/tistory/255B7E425672E1B41A?download\" data-lightbox=\"lightbox\"><img srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile25.uf.tistory.com%2Fimage%2F255B7E425672E1B41A2C7A\" src=\"https://t1.daumcdn.net/cfile/tistory/255B7E425672E1B41A\" style=\"cursor: pointer;max-width:100%;height:auto\" width=\"600\" height=\"600\" filename=\"React.js_logo.svg.png\" filemime=\"image/png\" style=\"width: 600px; height: 600px;\" ></span></span></figure>\n<p>이전에 <a href=\"http://blog.joostory.net/378\">AngularJS를 쓰느냐 Handlebars를 쓰느냐 고민</a>을 하면서 댓글 리스트 샘플을 만들어봤었는데 뒤늦게 <a href=\"http://dev.joostory.net/study/react_comment\">React로도 한번 만들어봤다</a>. 마침 튜토리얼도 댓글이라 튜토리얼을 많이 참고했다.</p>\n\n<ul><li><a href=\"https://facebook.github.io/react/docs/tutorial.html\">https://facebook.github.io/react/docs/tutorial.html</a></li></ul>\n\n<p>사실 다들 React, React 해서 진작에 살펴봤어야 했는데 이제야 React에 관심을 가지는 이유는 그간 React 방식이 그닥 맘에 들지 않았기 때문이다. javascript로 XML을 통해 dom을 컨트롤하는 것이 특히 그랬다. 그것을 <a href=\"https://facebook.github.io/jsx/\">JSX</a>라고 한다. 그리고 AngularJS 에도 제법 익숙해졌기 때문이기도 하다.</p>\n\n<h2>준비</h2>\n\n<pre><code>&lt;script src=\"https://fb.me/react-0.14.3.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://fb.me/react-dom-0.14.3.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/babel\" src=\"/js/react/comment.js\"&gt;&lt;/script&gt;</code></pre>\n\n<p>실제 필요한 것은 react, react-dom, compile된 comment.js 인데 개발환경이기에 <a href=\"https://babeljs.io\">babel</a>을 포함하고 comment.js의 type을 <code>text/babel</code>로 설정했다.</p>\n\n<h2>댓글 구조</h2>\n\n<pre><code>- CommentBox\n\t- CommentList\n\t\t- Comment\n\t- CommentForm</code></pre>\n\n<p>React는 커스텀 태그를 통해서 render를 시작한다. 그래서 댓글 구조를 먼저 만들 필요가 있다. 그닥 달라질 것이 없기에 튜토리얼에서 사용하는 구조를 그대로 사용했다.</p>\n\n<h2>ReactDOM</h2>\n\n<pre><code>ReactDOM.render(\n  &lt;CommentBox /&gt;,\n  document.getElementById('content')\n);</code></pre>\n\n<p>처음 시작점은 ReactDOM 이다. <code>content</code>에 <code>CommentBox</code>를 render해서 안에 넣는다.</p>\n\n<h2>CommentBox</h2>\n\n<pre><code>var CommentBox = React.createClass({\n\tgetInitialState: function() {\n\t\treturn {\n\t\t\tcount: sample.count,\n\t\t\tdata: sample.list\n\t\t};\n\t},\n\thandleCommentSubmit: function(comment) {\n\t\tthis.setState({\n\t\t\tcount: this.state.count + 1,\n\t\t\tdata: this.state.data.concat(comment)\n\t\t});\n\t},\n\thandleMoreList: function() {\n\t\tthis.setState({\n\t\t\tdata: sample.olderList.concat(this.state.data)\n\t\t});\n\t},\n\trender: function() {\n\t\treturn (\n\t\t\t&lt;div className=\"commentBox\"&gt;\n\t\t\t\t&lt;h3&gt;Comments {this.state.count}&lt;/h3&gt;\n\t\t\t\t&lt;CommentList data={this.state.data} count={this.state.count} onClickMoreList={this.handleMoreList} /&gt;\n\t\t\t\t&lt;CommentForm onCommentSubmit={this.handleCommentSubmit} /&gt;\n\t\t\t&lt;/div&gt;\n\t\t);\n\t}\n});</code></pre>\n\n<p>React에서 사용하는 dom은 같은 이름의 변수로 만든다. <code>CommentBox</code>라는 이름의 React Class를 만들고 <code>CommentList</code>와 <code>CommentForm</code>을 render 하도록 한다. 튜토리얼에서는 먼저 간단히 동작하는 코드를 만들고 차근차근 살을 붙여나가는데 이 코드는 모든 액션이 들어가 있어서 조금 길다.</p>\n<p>댓글 데이터는 <code>state</code> 로 관리하고 댓글폼에서 submit이 발생했을 때나 댓글 더보기를 했을 때에 대한 handler 정도가 있다. JSX에 property들을 설정했는데 각 클래스 내부에서 <code>this.props.NAME</code> 으로 접근하면 된다.</p>\n\n<h2>CommentList</h2>\n\n<pre><code>var CommentList = React.createClass({\n    handleMoreList: function(e) {\n        this.props.onClickMoreList();\n    },\n    render: function() {\n        var commentNodes = this.props.data.map(function(comment) {\n            var commentDate = timeStampToDate(comment.date);\n            return (\n                &lt;Comment author={comment.author.name} thumbnail={comment.author.image} date={commentDate}&gt;\n                    {comment.message}\n                &lt;/Comment&gt;\n            )\n        });\n        var btnMore = this.props.data.length &lt; this.props.count? &lt;button className=\"btn_comment_more\" style={{display:'block'}} onClick={this.handleMoreList}&gt;이전댓글 더보기&lt;/button&gt;:'';\n        return (\n            &lt;div className=\"comment_list\"&gt;\n                {btnMore}\n                &lt;ul id=\"comment-list\"&gt;\n                    {commentNodes}\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        );\n    }\n});\n\nvar Comment = React.createClass({\n  render: function() {\n    return (\n      &lt;li className=\"animation_up\"&gt;\n          &lt;div className=\"comment_profile\"&gt;\n              &lt;img src={this.props.thumbnail} /&gt;\n          &lt;/div&gt;\n          &lt;div className=\"comment_content\"&gt;\n              &lt;div&gt;{this.props.author} {this.props.date}&lt;/div&gt;\n              &lt;div&gt;{this.props.children}&lt;/div&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n    );\n  }\n});</code></pre>\n\n<p>댓글 리스트는 <code>Comment</code>의 리스트를 가지고 있다. 이는 render 내부의 변수명을 치환자로 사용해서 만든다. 더보기 버튼도 마찬가지다. JSX 내부에서 사용하는 치환자 <code>{NAME}</code>는 동일한 이름의 변수 <code>var NAME</code>를 만들어주면 된다.</p>\n\n<h2>CommentForm</h2>\n\n<pre><code>var CommentForm = React.createClass({\n    getInitialState: function() {\n        return {\n            message: ''\n        };\n    },\n    handleTextChange: function(e) {\n        this.setState({message: e.target.value});\n    },\n    handleSubmit: function(e) {\n        e.preventDefault();\n        this.props.onCommentSubmit({author: sample.author, date: new Date(), message: this.state.message});\n        this.setState({message: ''});\n    },\n    render: function() {\n        return (\n            &lt;div className=\"comment_form\"&gt;\n                &lt;form className=\"form\" onSubmit={this.handleSubmit}&gt;\n                    &lt;div className=\"form-group\"&gt;\n                        &lt;label&gt;Message&lt;/label&gt;\n                        &lt;input type=\"text\" className=\"form-control\" value={this.state.message} onChange={this.handleTextChange} /&gt;\n                    &lt;/div&gt;\n                    &lt;div className=\"form-group\"&gt;\n                        &lt;button className=\"btn btn-primary\" type=\"submit\"&gt;저장&lt;/button&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n            &lt;/div&gt;\n        );\n    }\n});</code></pre>\n\n<p>튜토리얼에서는 수정도 있고 ajax 통신도 있는데 간단한 예제라서 그런 부분은 없다보니 좀 별게 없다. form을 만들고 submit을 처리를 한다. submit할때 실제 폼 액션을 사용하면 안되니 내부에서 <code>e.preventDefault()</code>를 호출해야 한다.</p>\n\n<h2>마치며</h2>\n\n<p>처음에 JSX를 쓰는건 조금 어색했지만 점점 눈과 손에 익숙해지니 의외로 편하고 쉽게 느껴졌다. 특히 각 부분을 class화해서 재사용이 가능한 부분과 각 class간 통신을 프로퍼티로 정의해서 interface처럼 만드는 것은 굉장히 맘에 들었다. 그리고 튜토리얼 문서가 너무 좋았다. 토비의 스프링을 읽으며 스프링을 공부할때 느낀 자상함을 이 문서에서도 느낄 수 있었다.</p>\n<p>아직 React로 뭔가를 만들어본 적은 없지만 밑바닥부터 뭔가를 만들어야 할 일이 생긴다면  React를 써보고 싶다. 어차피 class 만들고 이벤트 처리 만들고 하다보면 비슷한 구조를 만들게 될 것 같은데 그럴거라면 React를 사용하지 않을 이유가 없을 것 같다.</p>\n\n<ul><li><a href=\"http://dev.joostory.net/study/react_comment\">React Comment 예제</a></li></ul>\n\n<h2>참조</h2>\n\n<ul><li><a href=\"http://dev.joostory.net/study/angularjs_comment\">AngularJS Comment 예제</a></li><li><a href=\"http://dev.joostory.net/study/handlebars_comment\">Handlebars Comment 예제</a></li><li><a href=\"https://facebook.github.io/react/index.html\">React</a></li></ul><p><br></p>            ","summary":"\n이전에 AngularJS를 쓰느냐 Handlebars를 쓰느냐 고민을 하면서 댓글 리스트 샘플을 만들어봤었는데 뒤늦게 React로도 한번 만들어봤다. 마침 튜토리얼도 댓글이라 튜토리얼을 많이 참고했다.\n\nhttps://facebook.github.io/react/docs/tutorial.html\n\n사실 다들 React, React 해서 진작에 살펴봤어야 했는데 이제야 React에 관심을 가지는 이유는 그간 React 방식이 그닥 맘에 들지 않았기 때문","image":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F255B7E425672E1B41A"}},"__N_SSG":true}