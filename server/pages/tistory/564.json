{"pageProps":{"post":{"id":"564","date":"2019. 5. 6. 10:02","title":"hooks로 만드는 reducer","content":"<p>react를 사용하는데 redux는 필수적인 요소라고 할 수 있다. 이제는 다른 방법들도 많은 것 같지만 결국 redux와 같이 app 전체에서 공유하는 공통 state를 사용하는 것은 비슷하다.</p>\n<pre id=\"code_1557102031211\" class=\"javascript\" data-ke-type=\"codeblock\"><code>import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { changeName } from './actions'\n\n@connect(state =&gt; ({\n\tname: state.name\n}), dispatch =&gt; ({\n\thandleChangeName: (name) =&gt; {\n    dispatch(changeName(name))\n  }\n}))\nclass MyComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n  }\n    \n  handleChange(e) {\n    const { handleChangeName } = this.props\n    handleChangeName(e.target.value)\n  }\n\t\n  render() {\n    const { name } = this.props\n    return (\n      &lt;div&gt;\n        Hello,\n        &lt;input\n          type='text'\n          value={name}\n          onChange={this.handleChange}\n        /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre>\n<p>그 동안의 component는 이런 식으로 es 클래스로 만들었는데 react 16.8에서 등장한 hooks 때문에 이 모습은 많이 바뀌었다. 먼저 component를 class 대신 function으로 만드는 것이 기본 형태가 되었다. 내부 method에 bind를 하는 대신 직접 호출할 수 있게 되었고, setState 대신 set으로 직접 값을 변경하는 등 객체지향적인 모습을 많이 벗어버리고 좀 더 javascript 본연의 모습과 가깝게 되었다.</p>\n<p>component가 훨씬 간결해지고 직관적으로 변화되었지만 쉽사리 변경하지 못하는 문제가 있었다. 바로 redux다. 위의 코드만 하더라도 decorator를 사용한 connect는 그리 거슬리지 않는다. 하지만 일전에 정리한 <a href=\"https://blog.joostory.net/562\" target=\"_blank\" rel=\"noopener\">functional component에 redux를 적용하는 방법</a>만 하더라도 별로 좋아보이지 않는다. 이왕이면 hooks를 사용하면 좋았을텐데 방법이 없었다.</p>\n<h2>useReducer 사용</h2>\n<p>어떻게든 hooks를 사용해서 이 문제를 해결해보고 싶었다. 그래서 useReducer를 사용해봤다. <a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\" target=\"_blank\" rel=\"noopener\">useReducer</a>는 redux에서 제공하는 state, dispatch를 거의 유사하게 제공한다. 하지만 전역으로 사용하기 위해서는 이 state, dispatch를 제공하는 store가 공유되어야 하는데 그게 안된다. 그래서 Context api를 사용해서 해결해보고자 했다.</p>\n<pre id=\"code_1557103888789\" class=\"javascript\" data-ke-type=\"codeblock\"><code>export const initialState = { ... }\nexport const AppContext = createContext(initialState);\nexport function reducer(state = initialState, action) { ... }\n\nexport default function(props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n      &lt;AppContext.Provider value={{state, dispatch}}&gt;\n        &lt;div className={classes.root}&gt;\n          &lt;Header /&gt;\n          &lt;Content /&gt;\n        &lt;/div&gt;\n      &lt;/AppContext.Provider&gt;\n  );\n}</code></pre>\n<p>어떻게 되긴한다. Provider에 state, dispatch를 넘겨주고 Consumer에서 getContext로 이걸 사용하니까 잘된다. 근데 문제는 getContext에 context를 넘겨주기 위해서 만든 AppContext를 export해서 사용해야했고 redux에서 제공하는 combineReducer 같은 기능은 제공하지 않기 때문에 reducer에 많은 데이터를 넣기가 부담이 된다.</p>\n<p>useReducer는 아무래도 component 하나에서 state를 효과적으로 관리하는 용도로만 사용해야할 것 같다. 아무래도 state를 컨트롤하는 로직이 component에서 분리될테니 좀 더 간결한 component 생성이 가능할 것이다. 그럼 hooks로 데이터 관리는 포기하고&nbsp; connect를 사용해야 하느냐 다시 원점으로 돌아온다.</p>\n<h2>react-redux의 hooks</h2>\n<p>이전에는 react-redux에서 hooks를 제공하지 않았다. 그런데 7.1.0-alpha 버전에서 hooks에 대한 개발과 테스트가 한창이다. <a href=\"https://github.com/reduxjs/react-redux/issues/1063\" target=\"_blank\" rel=\"noopener\">useRedux</a>를 썼다가 <a href=\"https://github.com/reduxjs/react-redux/issues/1252#issuecomment-488160930\" target=\"_blank\" rel=\"noopener\">useActions를 썼다가 alpha4 버전에서 useSelector, useDispatch로 정리되는 분위기</a>다. 언제 나오나 언제 나오나 했는데 곧 나올 분위기다. 하지만 아직 alpha이고api가 생겼다 없어졌다 마구 바뀌고 있어서 언제 나올지 확신할 수는 없다. 그래도 궁금하니 소소한 프로젝트에 한번 써보기로 했다.</p>\n<pre id=\"code_1557162592425\" class=\"javascript\" data-ke-type=\"codeblock\"><code>  const user = useSelector(state =&gt; state.user)\n  const dispatch = useDispatch()\n\n  useEffect(() =&gt; {\n    axios.get('/api/user')\n      .then(res =&gt; {\n        dispatch(updateUser(res.data.user));\n      })\n  }, []);</code></pre>\n<p>기존에 사용하던 connect 의 첫번째 파라미터는 useSelector로, 두번째 파라미터는 useDispatch로 생각하면 편하다. state의 각 값마다 useSelector를 사용해줘야 한다는 점은 약간 번거로울 수 있지만 그래도 그 편이 더 직관적이다. action을 dispatch할때 주로 한번 감싸서 props에 넣어줬는데 dispatch를 직접 받아서 action을 처리하는 것도 괜찮은 것 같다.</p>\n<p>써보니 더 좋은 것 같다. Context api는 redux를 완전히 대체하지 못할 것 같고 언뜻 이해가 안되던 hoc 방식의 connect를 hooks로 바꾸니 알기가 쉬워졌다. 어서 7.1이 정식 릴리즈되면 좋겠다. 이제는 완전히 class를 벗어나서 functional component로 전환할 수 있을 것 같다.</p>\n<p>&nbsp;</p>            ","summary":"react를 사용하는데 redux는 필수적인 요소라고 할 수 있다. 이제는 다른 방법들도 많은 것 같지만 결국 redux와 같이 app 전체에서 공유하는 공통 state를 사용하는 것은 비슷하다.\n<code>import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { changeName } from './actions'\n\n@connect(state =&gt;","image":"https://t1.daumcdn.net/tistory_admin/static/images/openGraph/opengraph.png"}},"__N_SSG":true}