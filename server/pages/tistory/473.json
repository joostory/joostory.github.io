{"pageProps":{"post":{"id":"473","date":"2017. 4. 28. 12:49","title":"angular quickstart 코드 분석","content":"<p>드디어 angular 코드를 살펴본다. 다른 프레임웍들은 일단 만들어보고 그 다음에 살펴봤는데 angular는 처음 보는게 너무 많아서 <a href=\"https://github.com/angular/quickstart\">quickstart 코드</a>를 먼저 살펴보고 만들어보든가 말든가 해야겠다.</p>\n<h2 id=\"main-ts\">main.ts</h2>\n<p>angular가 동작하도록 하는 부분은 <a href=\"http://blog.joostory.net/471\">어제까지 다 살펴봤으니</a> 오늘은 <code>main.ts</code>로 바로 들어간다.</p>\n<pre><code>import { platformBrowserDynamic } from &#39;@angular/platform-browser-dynamic&#39;;\n\nimport { AppModule } from &#39;./app/app.module&#39;;\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</code></pre><p><code>platformBrowserDynamic</code>는 이름에서 보이다시피 angular 모듈을 브라우저에서 바로 실행하도록 도와주는 것으로 보인다. <code>AppModule</code>으로 Angular앱을 시작한다.</p>\n<h2 id=\"app-module-ts\">app.module.ts</h2>\n<pre><code>import { NgModule }      from &#39;@angular/core&#39;;\nimport { BrowserModule } from &#39;@angular/platform-browser&#39;;\n\nimport { AppComponent }  from &#39;./app.component&#39;;\n\n@NgModule({\n  imports:      [ BrowserModule ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n</code></pre><p><code>AppModule</code>은 <code>@NgModule</code> 이라는 decorator를 붙였다. <code>BrowserModule</code>을 import하고 <code>AppComponent</code>로 bootstrap 한다. bootstrap에 포함된 Component만 실행된다.</p>\n<h2 id=\"app-component-ts\">app.component.ts</h2>\n<pre><code>import { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;my-app&#39;,\n  template: `&lt;h1&gt;Hello {{name}}&lt;/h1&gt;`,\n})\nexport class AppComponent  { name = &#39;Angular&#39;; }\n</code></pre><p><code>AppComponent</code>는 <code>@Component</code> decorator를 붙인다. <code>my-app</code> 태그를 <code>&lt;h1&gt;Hello {{name}}&lt;/h1&gt;</code>라는 템플릿으로 만든다. 값은 AppComponent 내부에서 set한다.</p>\n<hr>\n<p>코드를 쭉 따라가보니 몰랐던 decorator가 angular의 핵심기능을 수행하고 있는 것을 보게됐다. &#39;저게 뭐야. annotation이야?&#39; 라고 생각했는데 <a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">typescript의 decorator</a>였다. 뭔가 typescript를 마스터하지 않고 angular를 깊게 살펴보는 것은 어려운 일이란 생각이 들었다. 그리고 typescript가 생각보다 많은 기능을 가지고 있고 type을 명시하는 것이 얼마나 코드를 복잡하게 보이게 만드는지 새삼 느꼈다.</p>\n            ","summary":"드디어 angular 코드를 살펴본다. 다른 프레임웍들은 일단 만들어보고 그 다음에 살펴봤는데 angular는 처음 보는게 너무 많아서 quickstart 코드를 먼저 살펴보고 만들어보든가 말든가 해야겠다.\nmain.ts\nangular가 동작하도록 하는 부분은 어제까지 다 살펴봤으니 오늘은 main.ts로 바로 들어간다.\n<code>import { platformBrowserDynamic } from &#39;@angular/platform-browse","image":"https://t1.daumcdn.net/tistory_admin/static/images/openGraph/opengraph.png"}},"__N_SSG":true}