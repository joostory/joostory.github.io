{"pageProps":{"post":{"id":"562","date":"2019. 4. 18. 14:53","title":"React Redux functional component 적용","content":"<p>React Hooks는 functional component를 사용할 수밖에 없다. 애초에 그러려고 만든 거니까. 그동안 redux와 react를 connect하기 위해서 hoc를 사용했는데 decorator를 사용했었다.</p>\n<pre id=\"code_1555566174646\" class=\"javascript\" data-ke-type=\"codeblock\"><code>import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n@connect(state =&gt; ({\n  name: state.name\n}))\nclass MyComponent extends Component {\n  render() {\n    const { name } = this.props;\n    return (\n      &lt;div&gt;{name}&lt;/div&gt;\n    );\n  }\n}\n\nexport default MyComponent;</code></pre>\n<p>이 decorator는 class에만 사용할 수 있다. 그래서 functional component에는 사용할 수가 없다. hooks를 사용해볼까 하고 찾아봤지만 마땅히 좋아 보이는 것이 없었다. Provider를 만드는 부분부터 약간 달라지고 있어서 첨부터 만드는 거면 몰라도 이미 만든 것 전체를 바꿀 수는 없었다.</p>\n<p>하지만 방법이 있었다. 아주 쉽고 예전부터 알고 있었지만 생각을 못했던 것.</p>\n<pre id=\"code_1555566610454\" class=\"javascript\" data-ke-type=\"codeblock\"><code>import React from 'react';\nimport { connect } from 'react-redux';\n\nfunction MyComponent(props) {\n  const { name } = props;\n\n  return (\n    &lt;div&gt;{name}&lt;/div&gt;\n  );\n}\n\nexport default connect(state =&gt; ({\n  name: state.name\n}))(MyComponent);</code></pre>\n<p>decorator를 사용안하면 된다. 이 간단한 것을 이제야 알았다. 앞으로는 functional component로 모두 만들 수 있을 것 같다.</p>            ","summary":"React Hooks는 functional component를 사용할 수밖에 없다. 애초에 그러려고 만든 거니까. 그동안 redux와 react를 connect하기 위해서 hoc를 사용했는데 decorator를 사용했었다.\n<code>import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n@connect(state =&gt; ({\n  name: state.name","image":"https://t1.daumcdn.net/tistory_admin/static/images/openGraph/opengraph.png"}},"__N_SSG":true}