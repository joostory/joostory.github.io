{"pageProps":{"post":{"id":"174","date":"2009. 3. 18. 20:24","title":"GIF+PHP 해킹기법을 피하는 방법","content":"<a title=\"[http://swbae.egloos.com]로 이동합니다.\" target=\"_blank\" href=\"http://swbae.egloos.com\">헐랭이와 IT보안</a> 블로그는 RSS에 등록해두고 틈틈이 보고 있는데 오늘 눈이 번뜩 떠질만한 이야기가 올라왔습니다.<br>\n<br>\nGIF+PHP 해킹기법에 대한 소개인데 <a title=\"[http://durl.kr/eju]로 이동합니다.\" target=\"_blank\" href=\"http://durl.kr/eju\">http://durl.kr/eju</a> 에 자세한 내용이 있습니다.<br>\n뭐 간단한 예이지만 hack.gif.php 같이 이미지 업로드를 했다고 할때<br>\n이 파일이름 그대로를 저장하고 나중에 이미지를 불러올때<br>\n<br>\n<div style=\"border: 1px dashed rgb(193, 193, 193); padding: 10px;\" class=\"txc-textbox\">\n&lt;img src=\"hack.gif.php\" title=\"이건 해킹에 취약해!\" /&gt;</div>\n<br>\n이런 식으로 사용하게 되면 해커가 삽입한 php 코드가 실행된다는 것입니다.<br>\n물론 맨 나중 확장자를 가져오도록 하면 되긴 하지만 그렇다고 문제가 완전히 해결되는 것은 아닙니다.<br>\n<br>\n<br>\n따라서 다음과 같은 방법을 사용하거나..<br>\n<br>\n<div style=\"border: 1px dashed rgb(193, 193, 193); padding: 10px;\" class=\"txc-textbox\">\n$file = 'image.gif.php';<br>\nHeader('Content-Type: image/gif');<br>\nreadfile('images/'.basename($file));</div>\n<br>\n<br>\n헐랭이님이 두번이나 강조하는 바와 같이 이렇게 해야겠습니다.<br>\n<br>\n<div style=\"border: 1px dashed rgb(193, 193, 193); padding: 10px;\" class=\"txc-textbox\">\n이런 공격 기법을 막기 위해서는 파일 업로드 검사 시&nbsp;지금처럼 확장자에 기반한 검사를 수행하는 것에서 한발짝 나아가서<br>\n1. &nbsp;파일 헤더 부분과 바디 부분을 읽어 정상적인 이미지 파일인지 검사<br>\n하는 것이 필요하다.</div>\n<br>\n<br>\n<br>            ","summary":"헐랭이와 IT보안 블로그는 RSS에 등록해두고 틈틈이 보고 있는데 오늘 눈이 번뜩 떠질만한 이야기가 올라왔습니다.\n\nGIF+PHP 해킹기법에 대한 소개인데 http://durl.kr/eju 에 자세한 내용이 있습니다.\n뭐 간단한 예이지만 hack.gif.php 같이 이미지 업로드를 했다고 할때\n이 파일이름 그대로를 저장하고 나중에 이미지를 불러올때\n\n\n&lt;img src=\"hack.gif.php\" title=\"이건 해킹에 취약해!\" /&gt;\n\n이런 ","image":"https://t1.daumcdn.net/tistory_admin/static/images/openGraph/opengraph.png"}},"__N_SSG":true}