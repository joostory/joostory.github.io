{"pageProps":{"post":{"id":"577","date":"2019. 10. 18. 14:32","title":"Data Classes Reference 읽기","content":"<p>(<a href=\"https://kotlinlang.org/docs/reference/data-classes.html\">https://kotlinlang.org/docs/reference/data-classes.html</a> 읽으면서 정리)</p>\n<p>Data를 보관하기 위해서 class를 만든다. 이 class의 함수는 종종 데이터로부터 기계적으로 파생된다. 코틀린에서는 이를 <code>data class</code>라고 하고 <code>data</code>라는 마크를 붙인다.</p>\n<pre><code>data class User(\n  val name: String,\n  val age: Int\n)</code></pre>\n<p>컴파일러에서 자동으로 다음과 같은 멤버를 추가한다.</p>\n<ul>\n<li>equals(), hashCode()</li>\n<li>toString() - \"User(name=John, age=42)\"</li>\n<li><a href=\"https://kotlinlang.org/docs/reference/multi-declarations.html\">componentN()</a> 함수 (프로퍼티매핑)</li>\n<li>copy()</li>\n</ul>\n<p>생성된 코드의 일관성과 의미있는 동작을 위해 다음과 같은 조건을 충족해야 한다.</p>\n<ul>\n<li>primary constructor는 하나 이상의 파라미터가 있어야 한다.</li>\n<li>모든 primary constructor 파라미터는 val, var로 마트해야 한다.</li>\n<li>data class는 abstract, open, sealed, inner가 될 수 없다.</li>\n</ul>\n<pre><code>data class User(val name: String = \"\", val age: Int = 0)\ndata class Person(val name: String) {\n  var age: Int = 0\n}</code></pre>\n<p>문서가 길어서 정리할 게 많을 줄 알았는데 그닥 없다. 끝.</p>            ","summary":"(https://kotlinlang.org/docs/reference/data-classes.html 읽으면서 정리)\nData를 보관하기 위해서 class를 만든다. 이 class의 함수는 종종 데이터로부터 기계적으로 파생된다. 코틀린에서는 이를 data class라고 하고 data라는 마크를 붙인다.\n<code>data class User(\n  val name: String,\n  val age: Int\n)</code>\n컴파일러에서 자동으로 다음과 같은","image":"https://t1.daumcdn.net/tistory_admin/static/images/openGraph/opengraph.png"}},"__N_SSG":true}