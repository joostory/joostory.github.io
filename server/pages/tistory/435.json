{"pageProps":{"post":{"id":"435","date":"2016. 9. 14. 01:49","title":"webpack-dev-server 시작하기","content":"<p><a href=\"https://webpack.github.io/docs/webpack-dev-server.html\">webpack-dev-server</a>는 webpack 빌드를 테스트할때 유용한 http 서버다. 문서에도 간단히 설명되어 있지만 Express의 심플버전이라고 보면 된다. 결과물을 file로 쓰지 않고 메모리에서 빌드해서 테스트해 볼 수 있다.</p><p style=\"text-align: center\"><span class=\"imageblock\" style=\"display:inline-block;width:497px;;height:auto;max-width:100%\"><img srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile6.uf.tistory.com%2Fimage%2F215E3F4657D82DA20E2F07\" src=\"https://t1.daumcdn.net/cfile/tistory/215E3F4657D82DA20E\" style=\"max-width:100%;height:auto\" width=\"497\" height=\"270\" filename=\"68747470733a2f2f7765627061636b2e6769746875622e696f2f6173736574732f6c6f676f2e706e67.png\" filemime=\"image/png\"></span></p>\n<h2 id=\"header--\">사용법</h2>\n<p>먼저 webpack 설정을 다음과 같이 만든다. <a href=\"https://webpack.github.io/docs/configuration.html#output-publicpath\">output.publicPath</a>는 클라이언트가 빌드된 파일에 접근할 수 있도록 서버가 제공할 path이다.</p>\n<pre><code>// webpack.config.js\n\nvar path = require(\"path\");\nmodule.exports = {\n  entry: {\n    app: [\"./app/main.js\"]\n  },\n  output: {\n    path: path.resolve(__dirname, \"build\"),\n    publicPath: \"/assets/\",\n    filename: \"bundle.js\"\n  }\n};\n</code></pre><p>결과물이 <code>/assets/bundle.js</code>와 같은 path로 제공되므로 index.html 파일을 아래와 같이 만들어준다. 여기에 필요한 내용을 넣으면 된다. </p>\n<pre><code>// build/index.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script src=\"assets/bundle.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>서버의 구동은 npm으로 webpack-dev-server를 설치한 후 아래와 같이 실행하면 된다. content-base를 <code>build</code>로 설정하면 <code>http://localhost:8080</code>으로 만들어둔 <code>index.html</code>과 빌드된 <code>assets/bundle.js</code>로 접근이 가능하게 된다.</p>\n<pre><code>$ webpack-dev-server --content-base build/\n</code></pre><h2 id=\"header-production-development-mode\">production, development mode</h2>\n<p>dev-server는 development mode로 동작하도록 하고 build는 production mode로 할 수 있도록 몇가지 설정을 한다. 먼저 package.json에 <code>scripts</code>를 추가해 매번 길게 입력하지 않아도 되도록 한다. <code>NODE_ENV</code>를 구분하였다.</p>\n<pre><code>// package.json\n\n\"scripts\": {\n    \"build\": \"NODE_ENV=production webpack\",\n    \"start\": \"NODE_ENV=development webpack-dev-server --content-base ./build\"\n}\n</code></pre><p>구분된 <code>NODE_ENV</code>를 webpack config 내부에서 사용한다. production mode와 development mode에서의 plugin을 구분하였다.</p>\n<pre><code>// webpack.config.js\n\nplugins: process.env.NODE_ENV !== \"production\"? [] : [\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin()\n]\n</code></pre><h2 id=\"header--\">마치며</h2>\n<p>정리를 하면서 이전에 <a href=\"https://brunch.co.kr\">브런치</a> 댓글 작업을 하면서 만든 <a href=\"https://github.com/joostory/comment-editor\">댓글 샘플 코드</a>에 적용해보았다. webpack으로 빌드를 바꾸면서 CommonJS까지 적용하느라 작업량이 많아졌지만 그래도 적용하길 잘했다 싶다.</p><p>이전까지는 급하니까 간단한 http server와 <code>webpack --watch</code>로 해결했는데 이렇게 정리하고 나니 앞으론 급해도 이런 방법을 쓸 수 있을 것 같다.</p><p>(벌써 새벽 2시 ㅠㅠ)</p>            ","summary":"webpack-dev-server는 webpack 빌드를 테스트할때 유용한 http 서버다. 문서에도 간단히 설명되어 있지만 Express의 심플버전이라고 보면 된다. 결과물을 file로 쓰지 않고 메모리에서 빌드해서 테스트해 볼 수 있다.\n사용법\n먼저 webpack 설정을 다음과 같이 만든다. output.publicPath는 클라이언트가 빌드된 파일에 접근할 수 있도록 서버가 제공할 path이다.\n<code>// webpack.config.js\n\nv","image":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F215E3F4657D82DA20E"}},"__N_SSG":true}