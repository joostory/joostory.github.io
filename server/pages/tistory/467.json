{"pageProps":{"post":{"id":"467","date":"2017. 3. 5. 23:59","title":"Vue.js 체험","content":"<p>그동안 React를 사용하다보니 새로운 프레임워크에 눈을 잘 못 돌렸는데 -아니 돌릴 필요가 없었는데- 요즘 <a href=\"https://vuejs.org/\">Vue.js</a>라는 것이 핫하다는 것을 들었다. 궁금해서 문서를 조금 보긴 했지만 <a href=\"https://angularjs.org/\">구 angularjs</a>와 비슷하다는 느낌만 받았을 뿐 특징같은 건 파악하지 못했다.</p>\n<p>주말동안 혼자있는 시간이 많이 생겨서 이 기회에 Vue.js에 대해서 알아보기로 했다.</p>\n<h2 id=\"comment-sample\">comment-sample</h2>\n<p>이전에 <a href=\"http://dev.joostory.net/study/angularjs_comment\">angularjs</a>와 <a href=\"http://dev.joostory.net/study/handlebars_comment\">handlebar</a>로 댓글 sample code를 만들었는데 지금도 그런 방식으로 <a href=\"https://github.com/joostory/comment-sample\">react와 vuejs를 비교해서 댓글 sample code</a>를 만들기로 했다. (사실 <a href=\"http://dev.joostory.net/study/react_comment\">react</a>로도 이미 만들었지만 그 코드는 react를 잘 모를때 만들어서 너무 보기가 어려워 다시 만들기로 했다.)</p>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/256CEE4C58BC32F51F\" alt=\"\"></p>\n<p>만들려고 하는 샘플은 아주 간단하다. 맨 위엔 count가 있고, 그 아래에는 댓글 리스트, 그 아래에는 댓글 입력 폼이다. 댓글 리스트는 2개만 보이는데 더보기를 클릭하면 4개가 더 보인다. 새로 입력한 댓글은 리스트 아래에 추가된다.</p>\n<h2 id=\"react-version\">react version</h2>\n<p>먼저 비교적 잘 알고 있는 <a href=\"https://joostory.github.io/comment-sample/react.html\">react버전</a>을 만들어봤다. webpack 세팅하는게 번거로워서 그렇지 아주 쉽게 만든 편이다.</p>\n<pre><code>class App extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state = {\n      comments: [\n        {id: 5, message:&#39;Comment 5&#39;, created: new Date(new Date().getTime() - 600000)},\n        {id: 6, message:&#39;Comment 6&#39;, created: new Date(new Date().getTime() - 500000)},\n      ],\n      count: 6,\n      hasMoreComments: true\n    }\n  }\n\n  render() {\n    const { comments, count, hasMoreComments } = this.state\n    return (\n      &lt;div className=&quot;app&quot;&gt;\n        &lt;div&gt;{count} Comments&lt;/div&gt;\n        &lt;CommentList comments={comments} hasMore={hasMoreComments} onLoadMore={this.handleLoadMore.bind(this)} /&gt;\n        &lt;CommentForm onAdd={this.handleAdd.bind(this)} /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre><p>redux 같은 것은 사용하지 않고 간단히 state로만 데이터를 처리했다. App 안에 count, CommentList, CommentForm 컴포넌트를 넣고 데이터를 넘겨준다. count는 따로 컴포넌트로 만들려다가 바로 넣어버렸다.</p>\n<pre><code>class CommentList extends Component {\n  render() {\n    const { comments, hasMore, onLoadMore } = this.props\n    return (\n      &lt;div&gt;\n        {hasMore &amp;&amp;\n          &lt;button className=&quot;btn-more&quot; onClick={onLoadMore}&gt;more comment&lt;/button&gt;\n        }\n        {comments.map(item =&gt;\n          &lt;Comment key={item.id} comment={item} /&gt;\n        )}\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre><p>CommentList는 더보기 버튼과 Comment 리스트를 보여준다.</p>\n<pre><code>class Comment extends Component {\n  render() {\n    const { comment } = this.props\n    return (\n      &lt;div className=&quot;comment&quot;&gt;\n        &lt;div className=&quot;info&quot;&gt;{comment.created.toString()}&lt;/div&gt;\n        &lt;div className=&quot;message&quot;&gt;{comment.message}&lt;/div&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre><p>Comment는 댓글 내용과 날짜를 보여준다.</p>\n<pre><code>class CommentForm extends Component {\n  render() {\n    const { ready } = this.state\n    return (\n      &lt;form className=&quot;form&quot; onSubmit={this.handleAddComment.bind(this)}&gt;\n          &lt;label&gt;message&lt;/label&gt;\n        &lt;input className=&quot;text&quot; type=&#39;text&#39; ref=&#39;message&#39; onChange={this.handleMessageChange.bind(this)} /&gt;\n        &lt;button type=&#39;submit&#39; disabled={!ready}&gt;submit&lt;/button&gt;\n      &lt;/form&gt;\n    )\n  }\n}\n</code></pre><p>CommentForm은 텍스트를 입력받아서 <code>onAdd</code>에 넘겨준다. 여기까지 약 한시간 정도 걸렸다.</p>\n<h2 id=\"vuejs-version\">vuejs version</h2>\n<p>vuejs는 잘 모르는 상태다보니 문서를 보면서 하나하나 하기 시작했다. 먼저 어떻게 시작해야할지 감이 안잡혔다. 문서를 보다보니 <a href=\"https://vuejs.org/v2/guide/installation.html#CLI\">vue-cli</a>라는 것이 vuejs 프로젝트를 만들어줘서 이걸 따라하기로 했다.</p>\n<blockquote>\n<p>The Installation page provides more options of installing Vue. Note that we do not recommend beginners to start with vue-cli, especially if you are not yet familiar with Node.js-based build tools.</p>\n</blockquote>\n<p>나중에 안 사실이지만 <a href=\"https://vuejs.org/v2/guide/index.html#Getting-Started\">Getting Started</a>문서에 이런 내용이 있었다. 시작할때는 이걸로 하지말라고 ;; 어쨌든 난 이미 이걸 보고 따라한 상태이고 이 방식으로 만들었다.</p>\n<pre><code>module: {\n    rules: [{\n        test: /\\.vue$/,\n        use: [&#39;vue-loader&#39;]\n    }]\n},\nresolve: {\n    extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],\n    alias: {\n        &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39;\n    }\n}\n</code></pre><p>vue-cli에서 사용하는 방법을 사용하려면 webpack에 이런 설정을 해야한다. <code>.vue</code>파일을 vuejs로 해석을 하는 것인데 <code>.vue</code>는 template, script, style 모두가 한 파일안에 들어간 컴포넌트다. 자세한 내용은 <a href=\"http://vue-loader.vuejs.org/kr/\">vue-loader 한글문서</a>에 잘 설명이 되어있다.</p>\n<pre><code>&lt;template&gt;\n&lt;div&gt;Hello, {{ name }}!&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n            name: &quot;World&quot;\n        }\n    }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\ndiv { background-color:#f00 }\n&lt;/style&gt;\n</code></pre><p>이런 식으로 한 파일 안에 다 넣으면 &#39;Hello, World!&#39;라는 문자가 들어간 빨간 박스를 만들 수 있다. 내가 만든 것들은 다 이걸로 만들었다. style은 없는데 react버전을 만들면서 css파일로 만들어두었기 때문이다.</p>\n<pre><code>&lt;template&gt;\n    &lt;div class=&quot;app&quot;&gt;\n        &lt;div&gt;{{count}} Comments&lt;/div&gt;\n        &lt;CommentList :comments=&quot;comments&quot; :hasMore=&quot;hasMore&quot; @onLoadMore=&quot;onLoadMore&quot; /&gt;\n        &lt;CommentForm @onAdd=&quot;onAdd&quot; /&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport CommentList from &#39;./components/CommentList&#39;\nimport CommentForm from &#39;./components/CommentForm&#39;\n\nlet data = {\n    comments: [\n        {id:5, message:&quot;Comment 5&quot;, created:new Date(new Date().getTime() - 60000)},\n        {id:6, message:&quot;Comment 6&quot;, created:new Date(new Date().getTime() - 50000)}\n    ],\n    count: 6,\n    hasMore: true\n}\n\nexport default {\n    data() {\n        return data\n    },\n    methods: {\n        onAdd: function(message) { ... },\n        onLoadMore: function() { ... }\n    },\n    components: { CommentList, CommentForm }\n}\n&lt;/script&gt;\n</code></pre><p>vuejs에서는 property를 <code>:name</code>에 넣고 method는 <code>@name</code>에 넣는다. 구성은 react버전과 동일하다.</p>\n<pre><code>&lt;template&gt;\n    &lt;div&gt;\n        &lt;button v-if=&quot;hasMore&quot; class=&quot;btn-more&quot; v-on:click=&quot;onLoadMore&quot;&gt;more comment&lt;/button&gt;\n        &lt;Comment v-for=&quot;comment in comments&quot; :key=&quot;comment.id&quot; :comment=&quot;comment&quot; /&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Comment from &#39;./Comment&#39;\n\nexport default {\n    props: [\n        &#39;comments&#39;,\n        &#39;hasMore&#39;\n    ],\n    model: {\n        event: &quot;onLoadMore&quot;\n    },\n    methods: {\n        onLoadMore: function(e) {\n            this.$emit(&#39;onLoadMore&#39;)\n        }\n    },\n    components: { Comment }\n}\n&lt;/script&gt;\n</code></pre><p>CommentList도 template만 보면 react버전과 큰 차이는 없다. 단지 이벤트와 loop가 angularjs를 생각나게 하는 방식이다. <code>v-if</code>, <code>v-for</code>, <code>v-on</code>정도만 알면 ui를 만드는데 큰 무리는 없다. 컴포넌트도 <code>props</code>, <code>model</code>, <code>methods</code>, <code>components</code>만 알면 된다. 아! 상위에서 할당한 method를 호출하려면 <code>this.$emit(&#39;name&#39;)</code>을 사용한다.</p>\n<p>좋았던 점은 <code>class</code>를 react처럼 <code>className</code>으로 안써도 된다는 것이고, 나쁜 점은 반대로 이벤트나 루프가 vuejs만의 문법이라는 점이다. react는 이해하기 편했던 것이 javascript를 그대로 사용한다는 것이었다. 물론 초반에 JSX는 이해하기 힘들었다.</p>\n<pre><code>&lt;template&gt;\n&lt;div class=&quot;comment&quot;&gt;\n  &lt;div class=&quot;info&quot;&gt;{{comment.created.toString()}}&lt;/div&gt;\n  &lt;div class=&quot;message&quot;&gt;{{comment.message}}&lt;/div&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    props: [ &quot;comment&quot; ]\n}\n&lt;/script&gt;\n</code></pre><p>Comment 컴포넌트는 꽤 단순하다고 생각했는데 react를 생각하니 딱히 그런 것 같지는 않다.</p>\n<pre><code>&lt;template&gt;\n    &lt;form class=&quot;form&quot; v-on:submit.prevent=&quot;onAdd&quot;&gt;\n      &lt;label&gt;message&lt;/label&gt;\n      &lt;input ref=&quot;message&quot; class=&quot;text&quot; type=&#39;text&#39; /&gt;\n      &lt;button type=&#39;submit&#39;&gt;submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n    model: {\n        event: &quot;onAdd&quot;\n    },\n    methods: {\n        onAdd: function(e) {\n            this.$emit(&#39;onAdd&#39;, this.$refs.message.value)\n            this.$refs.message.value = &quot;&quot;\n        }\n    }\n}\n&lt;/script&gt;\n</code></pre><p>CommentForm도 특별한 것은 없는데 여기서 조금 어려웠던 것은 변하는 값에 따라서 button의 상태를 변경하는 것이다. 이건 아직도 해결이 안됐는데 input 값이 변경될때 button의 상태도 변하게 하려면 어떻게 해야할 지 모르겠다. <code>disabled=&quot;validate()? &#39;&#39; : &#39;disabled&#39;&quot;</code> 같은 방법을 써봤는데 값이 바뀔때마다 변경되지는 않았다. 아마도 watch를 위해선 다른 방법을 써야하는 것 같다. 여기까지도 너무 오래 걸려서 지쳤기때문에 vuejs버전은 여기서 중단했다. 하루를 꼬박 사용한 것 같다.</p>\n<h2 id=\"-\">결론</h2>\n<p>이렇게 react와 vuejs를 비교해가며 체험을 해봤다. 당연하게도 익숙한 react가 모든 부분에서 더 좋게 느껴진다. 하지만 이건 내가 익숙해져서 그런 것일테니 잠시 vuejs를 반드시 사용해야하고 앞으로도 계속 사용해야한다는 입장에 서서 장점을 찾아보기로 했다.</p>\n<ol>\n<li><p>저용량</p>\n<pre><code>react.js  739 kB\nvuejs.js  273 kB\n</code></pre><p>vuejs의 가장 큰 장점 중 하나가 경량화된 모듈이라는 점이다. 거의 같은 기능을 하는 두개의 프로젝트가 2-3배의 용량 차이가 난다.</p>\n</li>\n<li>빠른속도<br>너무 간단한 프로그램이라 별로 느끼진 못했지만 <a href=\"https://medium.com/js-dojo/react-or-vue-which-javascript-ui-library-should-you-be-using-543a383608d#.x1o5qdvn6\">vuejs는 react에 비해서 2-3배 가량 빠르다</a>고 한다.</li>\n</ol>\n<p>이 정도다. 사실 장점이 많지만 react와 비교를 해서 장점을 찾으려니 더 찾기가 어렵다. 오히려 단점이 눈에 더 보인다.</p>\n<ol>\n<li>컴포넌트의 event 처리가 직관적이지 않다.<br><code>v-on</code>, <code>v-if</code>, <code>v-for</code>등의 별도 이벤트를 먼저 익혀야 한다.</li>\n<li>컴포넌트의 인터페이스를 알기 어렵다. prop, model, method로 나눠지고 template에 바인딩되는 것이 자연스러워 보이지 않는다. 이해안되지만 동작이 되는 그런 느낌이다.</li>\n</ol>\n<p>종합해보면 <strong>어렵다</strong> 라는 한마디로 정리가 될 것 같다. 심지어 vue 컴포넌트 같은 것을 활용하기 위해서는 설정도 복잡하다. 가볍게 쓰고 싶지만 배워야 할 것이 너무 많고 제대로 쓰고 싶지만 react가 너무 매력적이다.</p>\n<p>이쯤에서 이 비교는 끝! 다음엔 <a href=\"https://angular.io\">angularjs 2.0</a>을 해봐야겠다. (언제 할지는 모르겠지만...)</p>\n            ","summary":"그동안 React를 사용하다보니 새로운 프레임워크에 눈을 잘 못 돌렸는데 -아니 돌릴 필요가 없었는데- 요즘 Vue.js라는 것이 핫하다는 것을 들었다. 궁금해서 문서를 조금 보긴 했지만 구 angularjs와 비슷하다는 느낌만 받았을 뿐 특징같은 건 파악하지 못했다.\n주말동안 혼자있는 시간이 많이 생겨서 이 기회에 Vue.js에 대해서 알아보기로 했다.\ncomment-sample\n이전에 angularjs와 handlebar로 댓글 sample code","image":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F256CEE4C58BC32F51F"}},"__N_SSG":true}